# -*- coding: utf-8 -*-
"""Project one Finetuning Gemma model using HF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fh9IhTU7ZhdNmmrbDjsB3TcMKQnKUU1p

# Finetuning Using Google Gemma's Model
"""

!pip3 install -q -U bitsandbytes==0.42.0
!pip3 install -q -U peft==0.8.2
!pip3 install -q -U trl==0.7.10
!pip3 install -q -U accelerate==0.27.1
!pip3 install -q -U datasets==2.17.0
!pip3 install -q -U transformers==4.38.0

import os
import transformers
import torch
from google.colab import userdata
from datasets import load_dataset
from trl import SFTTrainer
from peft import LoraConfig
from transformers import AutoTokenizer, AutoModelForCausalLM
from transformers import BitsAndBytesConfig, GemmaTokenizer

os.environ["HF_TOKEN"] = userdata.get('HF_TOKEN')

model_id = "google/gemma-2b"
bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=torch.bfloat16
)

tokenizer = AutoTokenizer.from_pretrained(model_id, token=os.environ['HF_TOKEN'])
model = AutoModelForCausalLM.from_pretrained(model_id,
                                             quantization_config=bnb_config,
                                             device_map={"":0},
                                             token=os.environ['HF_TOKEN'])

os.environ["WANDB_DISABLED"] = "True"

lora_config = LoraConfig(
    r = 16,
    target_modules = ["q_proj", "o_proj", "k_proj", "v_proj",
                      "gate_proj", "up_proj", "down_proj"],
    task_type = "CAUSAL_LM",
)

"""#Since I wanted to be original, I created my own dataset. It contains several reasons to missout on our friends' bianual meeting and classifying it as resonable or unreasonable. I asked each of my friends to give me 10 reasons and I combined them togather, while trying to avoid duplicates in one dataset that I upploaded to HuggingFace website."""

from datasets import load_dataset

data = load_dataset("JohnKh/Reasons-to-miss-friends-meeting")
data = data.map(lambda samples: tokenizer(samples["Excuse for missing friends meeting"]), batched=True)

data['train']['Excuse for missing friends meeting']

def formatting_func(example):
  listt=[]
  for i in range(114):
    text = f"Excuse: {example['Excuse for missing friends meeting'][i]}; \n Response:{example['Reasonable/Unreasonable'][i]}"
    listt.append(text)
  return listt

data['train']

trainer = SFTTrainer(
    model=model,
    train_dataset=data["train"],
    args=transformers.TrainingArguments(
        per_device_train_batch_size=1,
        gradient_accumulation_steps=4,
        warmup_steps=2,
        max_steps=60,
        learning_rate=2e-4,
        fp16=True,
        logging_steps=1,
        output_dir="outputs",
        optim="paged_adamw_8bit",
        report_to="none"
    ),
    peft_config=lora_config,
    formatting_func=formatting_func,
)

trainer.train()

text = "Excuse: Bored;"
device = "cuda:0"
inputs = tokenizer(text, return_tensors="pt").to(device)

outputs = model.generate(**inputs, max_new_tokens=10)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

text = "Excuse: Illness;"
device = "cuda:0"
inputs = tokenizer(text, return_tensors="pt").to(device)

outputs = model.generate(**inputs, max_new_tokens=10)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

text = "Excuse: Exam;"
device = "cuda:0"
inputs = tokenizer(text, return_tensors="pt").to(device)

outputs = model.generate(**inputs, max_new_tokens=10)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

text = "Excuse: Money;"
device = "cuda:0"
inputs = tokenizer(text, return_tensors="pt").to(device)

outputs = model.generate(**inputs, max_new_tokens=10)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))